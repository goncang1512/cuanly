generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String        @id
  email           String        @unique
  name            String?
  emailVerified   Boolean
  image           String?
  createdAt       DateTime
  updatedAt       DateTime
  phonenumber     String?
  avatar          String?
  avatarId        String?
  displayUsername String?
  username        String?       @unique
  accounts        Account[]
  fromLedger      ledger[]      @relation("fromUser")
  toLedger        ledger[]      @relation("toUser")
  member          Member[]
  Planning        Planning[]
  sessions        Session[]
  Transaction     Transaction[]
  Wallet          Wallet[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Wallet {
  id              String        @id
  name            String
  balance         Float         @default(0)
  type            TypeWallet    @default(self)
  userId          String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  kategori        String
  category        CateWallet    @default(default)
  member          Member[]
  moveTransaction Transaction[] @relation("MoveTransaction")
  transaction     Transaction[]
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("wallet")
}

model Transaction {
  id          String      @id
  category    String
  description String?
  balance     Float
  type        TransType
  userId      String
  walletId    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  fromId      String?
  status      StatusTrans @default(aktif)
  fromWallet  Wallet?     @relation("MoveTransaction", fields: [fromId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  wallet      Wallet      @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@map("transaction")
}

model Planning {
  id             String     @id
  name           String
  description    String
  price          Float
  deadline       DateTime
  icon           String
  userId         String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  recurrenceType RecurenceT @default(weekly)
  user           User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("planning")
}

model Member {
  id        String   @id
  userId    String
  walletId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  wallet    Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@map("member")
}

model ledger {
  id        String       @id
  fromId    String
  toId      String
  amount    Int
  status    StatusLedger @default(unpaid)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  paidMount Int          @default(0)
  walletId  String
  from      User         @relation("fromUser", fields: [fromId], references: [id], onDelete: Cascade)
  to        User         @relation("toUser", fields: [toId], references: [id], onDelete: Cascade)

  @@map("ledger")
}

enum TypeWallet {
  self
  group
}

enum CateWallet {
  default
  debt
  receivable
  investment
  asset
}

enum TransType {
  add
  move
  transfer
  pay
  adjust
}

enum StatusTrans {
  aktif
  delete
}

enum RecurenceT {
  monthly
  weekly
  yearly
  onetime
}

enum StatusLedger {
  paid
  unpaid
}
