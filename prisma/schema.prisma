// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(dbgenerated())
  email         String    @unique
  name          String?
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  phonenumber   String?
  sessions      Session[]
  accounts      Account[]

  Wallet      Wallet[]
  Transaction Transaction[]
  avatar      String      @default("avatar.jpeg")
  avatarId    String     @default("default")

  @@map("user")
  Planning Planning[]
}

model Session {
  id        String   @id @default(dbgenerated())
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @default(dbgenerated())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @default(dbgenerated())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum TypeWallet {
  self
  group
}

enum CateWallet {
  default
  debt
  receivable
  investment
  asset
}

model Wallet {
  id       String     @id
  name     String
  balance  Float      @default(0)
  type     TypeWallet @default(self)
  userId   String
  kategori String
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  category CateWallet @default(default)

  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  transaction     Transaction[]
  moveTransaction Transaction[] @relation(name: "MoveTransaction")

  @@map("wallet")
}

enum TransType {
  add
  move
  transfer
  pay
  adjust
}

enum StatusTrans {
  aktif
  delete
}

model Transaction {
  id          String      @id @default(dbgenerated())
  category    String
  description String?
  balance     Float
  type        TransType
  userId      String
  walletId    String
  status      StatusTrans @default(aktif)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  wallet Wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)

  fromId     String?
  fromWallet Wallet? @relation(fields: [fromId], references: [id], onDelete: Cascade, name: "MoveTransaction")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("transaction")
}

model Planning {
  id            String          @id       @default(dbgenerated())
  name          String
  description   String
  price         Float
  deadline      DateTime
  icon          String
  userId        String

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("planning")
}